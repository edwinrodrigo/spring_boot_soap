package com.ifis.ws_ifis.wsdl.generated;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.5
 * 2024-12-02T12:09:38.677-05:00
 * Generated source version: 4.0.5
 *
 */
@WebServiceClient(name = "IfisWS",
                  wsdlLocation = "file:/D:/dev/ws/ws-ifis/src/main/resources/IfisWS.wsdl.k",
                  targetNamespace = "http://trafficcontrol.com.ec")
public class IfisWS extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://trafficcontrol.com.ec", "IfisWS");
    public static final QName MetodosPort = new QName("http://trafficcontrol.com.ec", "MetodosPort");
    static {
        URL url = null;
        try {
            url = URI.create("file:/D:/dev/ws/ws-ifis/src/main/resources/IfisWS.wsdl.k").toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(IfisWS.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/dev/ws/ws-ifis/src/main/resources/IfisWS.wsdl.k");
        }
        WSDL_LOCATION = url;
    }

    public IfisWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public IfisWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IfisWS() {
        super(WSDL_LOCATION, SERVICE);
    }

    public IfisWS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public IfisWS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public IfisWS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns MetodosPort
     */
    @WebEndpoint(name = "MetodosPort")
    public MetodosPort getMetodosPort() {
        return super.getPort(MetodosPort, MetodosPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MetodosPort
     */
    @WebEndpoint(name = "MetodosPort")
    public MetodosPort getMetodosPort(WebServiceFeature... features) {
        return super.getPort(MetodosPort, MetodosPort.class, features);
    }

}
